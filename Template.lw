composition

import Fugue.AWS as AWS
import Fugue.AWS.DynamoDB as DynamoDB
import Fugue.AWS.EC2 as EC2
import Fugue.AWS.SNS as SNS

region: AWS.Us-west-2


dynamodb-table-1: DynamoDB.Table.new {
  attributes: {
    "ReinventKey": DynamoDB.S,
  },
  name: "Reinvent",
  provisionedThroughput: {
    read: 5,
    write: 5,
  },
  region: region,
  schema: {
    "ReinventKey": DynamoDB.HASH,
  },
}


ec2-instance-1: EC2.Instance.newWithNetworkInterfaces {
  disableApiTermination: False,
  ebsOptimized: False,
  image: "ami-0a00ce72",
  instanceType: EC2.T2_micro,
  monitoring: False,
  primaryNetworkInterface: EC2.PrimaryInstanceNetworkInterface {
    associatePublicIpAddress: False,
    description: "Primary network interface",
    privateIpAddress: "10.0.1.121",
    securityGroups: [
          ec2-securitygroup-1,
    ],
    sourceDestCheck: True,
    subnet:   ec2-subnet-1,
  },
  rootBlockDevice: EC2.RootBlockDevice.new {
    tags: [
      AWS.tag("Name", "Reinvent"),
    ],
    volumeSize: 8,
    volumeType: EC2.Gp2,
  },
  tags: [
    AWS.tag("Name", "Reinvent"),
  ],
}

ec2-internetgateway-1: EC2.InternetGateway.new {
  region: region,
  tags: [
    AWS.tag("Name", "Reinvent"),
  ],
  vpc: ec2-vpc-1,
}

ec2-routetable-1: EC2.RouteTable.new {
  associations: [
      ec2-subnet-1,
  ],
  tags: [
    AWS.tag("Name", "Reinvent"),
  ],
  vpc: ec2-vpc-1,
}

ec2-securitygroup-1: EC2.SecurityGroup.new {
  description: "for Reinvent demo",
  ipPermissions: [
    EC2.IpPermission.new {
      fromPort: 80,
      ipProtocol: "tcp",
      target: EC2.IpPermission.Target.all,
      toPort: 80,
    },
    EC2.IpPermission.new {
      fromPort: 443,
      ipProtocol: "tcp",
      target: EC2.IpPermission.Target.all,
      toPort: 443,
    },
  ],
  ipPermissionsEgress: [
    EC2.IpPermission.new {
      fromPort: 0,
      ipProtocol: "-1",
      target: EC2.IpPermission.Target.all,
      toPort: 0,
    },
  ],
  tags: [
    AWS.tag("Name", "Reinvent"),
  ],
  vpc: ec2-vpc-1,
}

ec2-subnet-1: EC2.Subnet.new {
  availabilityZone: AWS.B,
  cidrBlock: "10.0.1.0/24",
  defaultForAz: False,
  mapPublicIpOnLaunch: False,
  tags: [
    AWS.tag("Name", "Reinvent"),
  ],
  vpc: ec2-vpc-1,
}

ec2-vpc-1: EC2.Vpc.new {
  cidrBlock: "10.0.0.0/16",
  dhcpOptions: None,
  enableDnsHostnames: False,
  enableDnsSupport: True,
  instanceTenancy: EC2.DefaultTenancy,
  region: region,
  tags: [
    AWS.tag("Name", "Reinvent"),
  ],
}

# sns-topic-1: SNS.Topic.new {
#   name: "dynamodb",
#   policy: '{"Version":"2008-10-17","Id":"__default_policy_ID","Statement":[{"Sid":"__default_statement_ID","Effect":"Allow","Principal":{"AWS":"*"},"Action":["SNS:GetTopicAttributes","SNS:SetTopicAttributes","SNS:AddPermission","SNS:RemovePermission","SNS:DeleteTopic","SNS:Subscribe","SNS:ListSubscriptionsByTopic","SNS:Publish","SNS:Receive"],"Resource":"arn:aws:sns:us-west-2:711396365629:dynamodb","Condition":{"StringEquals":{"AWS:SourceOwner":"711396365629"}}}]}',
#   region: AWS.Us-west-2,
#   resourceId: "arn:aws:sns:us-west-2:711396365629:dynamodb",
# }


